name: CD - Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
    
    - name: Set deployment variables
      id: vars
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.sha }}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_OUTPUT
    
    - name: Create secrets file
      run: |
        cat > k8s/overlays/${{ steps.vars.outputs.ENVIRONMENT }}/secrets.env <<EOF
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        EOF
    
    - name: Deploy to Kubernetes
      run: |
        export DOCKER_REGISTRY=${{ env.REGISTRY }}
        export VERSION=${{ steps.vars.outputs.VERSION }}
        export ENVIRONMENT=${{ steps.vars.outputs.ENVIRONMENT }}
        export SKIP_BUILD=true
        
        ./k8s/deploy.sh
    
    - name: Verify deployment
      run: |
        kubectl -n auto-inquiry-form-${{ steps.vars.outputs.ENVIRONMENT }} rollout status deployment --timeout=10m
        kubectl -n auto-inquiry-form-${{ steps.vars.outputs.ENVIRONMENT }} get pods
    
    - name: Run smoke tests
      run: |
        INGRESS_URL=$(kubectl -n auto-inquiry-form-${{ steps.vars.outputs.ENVIRONMENT }} get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        
        # Wait for ingress to be ready
        sleep 30
        
        # Check health endpoints
        curl -f https://${INGRESS_URL}/health || exit 1
        curl -f https://${INGRESS_URL}/api/health || exit 1
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to ${{ steps.vars.outputs.ENVIRONMENT }} ${{ job.status }}
          Version: ${{ steps.vars.outputs.VERSION }}
          Actor: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ### Features
          - Auto inquiry form detection and submission
          - Batch processing capabilities
          - Compliance checking
          
          ### Deployment
          - Deployed to production
          - All tests passing
          
          ### Docker Images
          - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-backend`
          - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-frontend`
        draft: false
        prerelease: false